{"version":3,"sources":["AciComponent.js","SummaryPage.js","ConfirmationPage.js","App.js","serviceWorker.js","index.js"],"names":["withRouter","checkoutId","onBeforeSubmitWithAci","aciScriptContainer","useRef","useEffect","script","document","createElement","type","async","src","id","getElementById","addEventListener","error","console","window","wpwlOptions","style","locale","onReady","onBeforeSubmitCard","onError","alert","JSON","stringify","current","appendChild","initAciForm","marginTop","className","data-testid","action","location","origin","data-brands","ref","SummaryPage","to","ConfirmationPage","HN_URL","App","useState","checkoutIdInputValue","setCheckoutIdInputValue","setCheckoutId","apiCallIsSuccessful","width","margin","path","exact","onSubmit","e","preventDefault","htmlFor","value","onChange","target","a","fetch","response","json","wpwl","executePayment","makeApiCall","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPAsDeA,eAnDM,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,WAAYC,EAA4B,EAA5BA,sBAC5BC,EAAqBC,mBAiC3B,OA/BAC,qBAAU,WA4BJJ,GA3BJ,WACE,IAAMK,EAASC,SAASC,cAAc,UACtCF,EAAOG,KAAO,kBACdH,EAAOI,OAAQ,EACfJ,EAAOK,IAAP,iEAAuEV,GACvEK,EAAOM,GAAK,aAERL,SAASM,eAAe,gBAE5BP,EAAOQ,iBAAiB,SAAS,SAACC,GAChCC,QAAQD,MAAMA,MAGhBE,OAAOC,YAAc,CACnBC,MAAO,QACPC,OAAQ,KACRC,QAAS,aACTC,mBAAoBpB,EACpBqB,QAAS,SAACR,GACRS,MAAMC,KAAKC,UAAUX,IACrBC,QAAQD,MAAMA,KAIlBZ,EAAmBwB,QAAQC,YAAYtB,IAGzBuB,KACf,CAAC5B,EAAYC,IAEXD,EAKH,yBAAKkB,MAAO,CAAEW,UAAW,QAAUC,UAAU,wBAAwBC,cAAY,gBAC/E,0BACEC,OAAM,UAAKhB,OAAOiB,SAASC,OAArB,uBACNJ,UAAU,iBACVK,cAAY,gBAGd,yBAAKC,IAAKlC,KAXL,6D,OCzBImC,EAVK,WAClB,OACE,6BACE,4CAEA,kBAAC,IAAD,CAAMC,GAAG,KAAT,aCKSC,EAVU,WACvB,OACE,6BACE,0DAEA,kBAAC,IAAD,CAAMD,GAAG,KAAT,aCFAE,EAAS,wDA4EAC,MAtEf,WAAgB,IAAD,EAC2CC,mBAAS,IADpD,mBACNC,EADM,KACgBC,EADhB,OAEuBF,mBAAS,IAFhC,mBAEN1C,EAFM,KAEM6C,EAFN,KAGTC,GAAsB,EAgC1B,OACE,yBAAKhB,UAAU,MAAMZ,MAAO,CAAE6B,MAAO,MAAOC,OAAQ,eAClD,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,GACrB,oCACE,0BAAMC,SAXlB,SAAwBC,GACtBA,EAAEC,iBACFR,EAAcF,KAUF,2BAAOW,QAAQ,cAAf,eACA,2BACE3C,GAAG,aACHH,KAAK,OACL+C,MAAOZ,EACPa,SArBhB,SAAgCJ,GAC9BR,EAAwBQ,EAAEK,OAAOF,UAuBrB,4BAAQ/C,KAAK,UAAb,WAGF,kBAAC,EAAD,CAAcR,WAAYA,EAAYC,sBAhDlD,WAcE,QAAI6C,IAbJ,mBAAAY,EAAAjD,OAAA,2EAAAiD,EAAA,MAE2BC,MAAMnB,IAFjC,cAEUoB,EAFV,kBAAAF,EAAA,MAGUE,EAASC,QAHnB,OAIIf,GAAsB,EAb5B9B,OAAO8C,KAAKC,eAAe,uBASzB,kDAQIhD,QAAQD,MAAR,MARJ,yDAeAkD,IAEO,QAkCD,kBAAC,IAAD,CAAOf,KAAK,iBACV,kBAAC,EAAD,OAGF,kBAAC,IAAD,CAAOA,KAAK,sBACV,kBAAC,EAAD,WC9DQgB,QACW,cAA7BjD,OAAOiB,SAASiC,UAEe,UAA7BlD,OAAOiB,SAASiC,UAEhBlD,OAAOiB,SAASiC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS/D,SAASM,eAAe,SD6H3C,kBAAmB0D,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.75f1d340.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { withRouter } from 'react-router';\n\nconst AciComponent = ({ checkoutId, onBeforeSubmitWithAci }) => {\n  const aciScriptContainer = useRef();\n\n  useEffect(() => {\n    function initAciForm() {\n      const script = document.createElement('script');\n      script.type = 'text/javascript';\n      script.async = true;\n      script.src = `https://test.oppwa.com/v1/paymentWidgets.js?checkoutId=${checkoutId}`;\n      script.id = 'aci-script';\n\n      if (document.getElementById('aci-script')) return;\n\n      script.addEventListener('error', (error) => {\n        console.error(error);\n      });\n\n      window.wpwlOptions = {\n        style: 'plain',\n        locale: 'en',\n        onReady: () => {},\n        onBeforeSubmitCard: onBeforeSubmitWithAci,\n        onError: (error) => {\n          alert(JSON.stringify(error));\n          console.error(error);\n        },\n      };\n\n      aciScriptContainer.current.appendChild(script);\n    }\n\n    if (checkoutId) initAciForm();\n  }, [checkoutId, onBeforeSubmitWithAci]);\n\n  if (!checkoutId) {\n    return <p>Please submit a Checkout ID</p>;\n  }\n\n  return (\n    <div style={{ marginTop: '5rem' }} className=\"AciComponent my-l-2xs\" data-testid=\"AciComponent\">\n      <form\n        action={`${window.location.origin}/confirmation-page/`}\n        className=\"paymentWidgets\"\n        data-brands=\"VISA MASTER\"\n      />\n\n      <div ref={aciScriptContainer} />\n    </div>\n  );\n};\n\nexport default withRouter(AciComponent);\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst SummaryPage = () => {\n  return (\n    <div>\n      <h1>Summary page</h1>\n\n      <Link to=\"/\">Go back</Link>\n    </div>\n  );\n};\n\nexport default SummaryPage;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst ConfirmationPage = () => {\n  return (\n    <div>\n      <h1>Thank you for your payment</h1>\n\n      <Link to=\"/\">Go back</Link>\n    </div>\n  );\n};\n\nexport default ConfirmationPage;\n","import React, { useState } from 'react';\nimport AciComponent from './AciComponent';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport SummaryPage from './SummaryPage';\nimport ConfirmationPage from './ConfirmationPage';\n\nconst HN_URL = 'https://hacker-news.firebaseio.com/v0/topstories.json';\n\nfunction executePayment() {\n  window.wpwl.executePayment('wpwl-container-card');\n}\n\nfunction App() {\n  const [checkoutIdInputValue, setCheckoutIdInputValue] = useState('');\n  const [checkoutId, setCheckoutId] = useState('');\n  let apiCallIsSuccessful = false;\n\n  function onBeforeSubmitWithAci() {\n    async function makeApiCall() {\n      try {\n        const response = await fetch(HN_URL);\n        await response.json();\n        apiCallIsSuccessful = true;\n\n        executePayment();\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    // The api call has already been made.\n    if (apiCallIsSuccessful) return true;\n\n    makeApiCall();\n\n    return false;\n  }\n\n  function handleCheckoutIdChange(e) {\n    setCheckoutIdInputValue(e.target.value);\n  }\n\n  function handleOnSubmit(e) {\n    e.preventDefault();\n    setCheckoutId(checkoutIdInputValue);\n  }\n\n  return (\n    <div className=\"App\" style={{ width: '30%', margin: '10rem auto' }}>\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact={true}>\n            <>\n              <form onSubmit={handleOnSubmit}>\n                <label htmlFor=\"checkoutId\">Checkout ID</label>\n                <input\n                  id=\"checkoutId\"\n                  type=\"text\"\n                  value={checkoutIdInputValue}\n                  onChange={handleCheckoutIdChange}\n                />\n\n                <button type=\"submit\">Submit</button>\n              </form>\n\n              <AciComponent checkoutId={checkoutId} onBeforeSubmitWithAci={onBeforeSubmitWithAci} />\n            </>\n          </Route>\n\n          <Route path=\"/summary-page\">\n            <SummaryPage />\n          </Route>\n\n          <Route path=\"/confirmation-page\">\n            <ConfirmationPage />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}